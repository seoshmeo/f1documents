#!/usr/bin/env python3
"""
Simple script to test database connection
"""

import psycopg2
from dotenv import load_dotenv
import os
import sys

# Load environment variables
load_dotenv()

def test_connection():
    """Test database connection and display info"""

    print("="*60)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL")
    print("="*60)

    # Display connection parameters (hide password)
    print(f"\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    print(f"  –•–æ—Å—Ç: {os.getenv('DB_HOST', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"  –ü–æ—Ä—Ç: {os.getenv('DB_PORT', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {os.getenv('DB_NAME', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {os.getenv('DB_USER', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"  –ü–∞—Ä–æ–ª—å: {'*' * len(os.getenv('DB_PASSWORD', '')) if os.getenv('DB_PASSWORD') else '–Ω–µ —É–∫–∞–∑–∞–Ω'}")

    print("\n" + "="*60)
    print("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    print("="*60 + "\n")

    try:
        # Try to connect
        connection = psycopg2.connect(
            host=os.getenv('DB_HOST'),
            port=os.getenv('DB_PORT'),
            database=os.getenv('DB_NAME'),
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD')
        )

        cursor = connection.cursor()

        # Get PostgreSQL version
        cursor.execute('SELECT version();')
        version = cursor.fetchone()[0]

        print("‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!")
        print(f"\nPostgreSQL –≤–µ—Ä—Å–∏—è:")
        print(f"  {version}")

        # Check if table exists
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables
                WHERE table_name = 'fia_documents'
            );
        """)
        table_exists = cursor.fetchone()[0]

        print(f"\n–¢–∞–±–ª–∏—Ü–∞ 'fia_documents': {'‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if table_exists else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")

        if table_exists:
            # Get document count
            cursor.execute("SELECT COUNT(*) FROM fia_documents;")
            count = cursor.fetchone()[0]
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {count}")

            # Get latest document
            cursor.execute("""
                SELECT document_name, created_at
                FROM fia_documents
                ORDER BY created_at DESC
                LIMIT 1;
            """)
            latest = cursor.fetchone()

            if latest:
                print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç:")
                print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {latest[0]}")
                print(f"  –î–æ–±–∞–≤–ª–µ–Ω: {latest[1]}")
            else:
                print("\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ (–Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)")
        else:
            print("\n‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ 'fia_documents' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python main.py once' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã")

        # Close connection
        cursor.close()
        connection.close()

        print("\n" + "="*60)
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        print("="*60)

        return True

    except psycopg2.OperationalError as e:
        print("‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø!")
        print(f"\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        print(f"  {e}")

        print(f"\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print(f"  1. –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç –∏–ª–∏ –ø–æ—Ä—Ç")
        print(f"  2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print(f"  3. –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        print(f"  4. PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print(f"  5. –§–∞–µ—Ä–≤–æ–ª –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

        print(f"\nüìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ .env")

        return False

    except psycopg2.Error as e:
        print("‚ùå –û–®–ò–ë–ö–ê POSTGRESQL!")
        print(f"\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        print(f"  {e}")
        return False

    except Exception as e:
        print("‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê!")
        print(f"\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        print(f"  {e}")
        return False


if __name__ == '__main__':
    success = test_connection()
    sys.exit(0 if success else 1)
